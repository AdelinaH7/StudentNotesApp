const db = require("../config/db");
const User = require("../models/User");
const Note = require("../models/Note");
const NotesGroup = require("../models/NotesGroup");
const NotesFilters = require("../models/NotesFilters");
const StudyGroup = require("../models/StudyGroup");
const UserStudy = require("../models/UserStudy");
const StudyNote = require("../models/StudyNote");
const UsersNote = require("../models/UsersNote");
const bcrypt = require("bcryptjs");

//Controller used for populating each table with one entry (used best after resetting the db)

const dbpopulateController = {
  //variable containing the functions

  addData: async (req, res) => {
    //This function receives request and response and is an async one
    const user = User.findOne({
      //This is a variable initialized by searching for a user in the db for a user with that respective mail
      where: {
        email: "ceva.ceva@stud.ase.ro",
      },
    });
    if (user.id > 0) {
      //If the user exists in the db it will have an id and that id is autogenerated and is higher than 0
      res.status(400).send({
        //This will send status code 400 Bad Request (which is an error type) and a message
        msg: "Database already populated",
      });
    } else {
      //If the user doesn't exist it will initialize some objects that will be sent to the db
      //Each object is hard coded in a way that they will pass all the validations inputed
      const userToSend = {
        username: "Adelina",
        password: "ceva123",
        email: "ceva.ceva@stud.ase.ro",
        age: 21,
        csie: "Info",
        yearCsie: 3,
      };

      const userToSend2 = {
        username: "Bogdan",
        password: "ceva1234",
        email: "ceva2.ceva@stud.ase.ro",
        age: 21,
        csie: "Info",
        yearCsie: 3,
      };

      const note = {
        title: "Notita 1",
        content: "ceva content, mult content si mult scris",
        subject: "Practice",
        authorId: 1,
      };

      const filter = {
        filterName: "Filtru 1",
        userId: 1,
      };

      const notesFilters = {
        NoteId: 1,
        NotesGroupId: 1,
      };

      const studyGroup = {
        name: "Study group 1",
        description: "Test study group",
        founderId: 1,
      };

      const userStudy = {
        UserId: 1,
        StudyGroupId: 1,
      };

      const studyNote = {
        NoteId: 1,
        StudyGroupId: 1,
      };

      const usersNote = {
        NoteId: 1,
        UserId: 2,
      };

      try {
        //Here each entry is created in the db using the .create() function, which receives the object containing the data as a parameter
        //The result is saved in the constant from the left hand side and it ensures that the operation is finished using the await operator, which pauses the execution to ensure value is waited for
        const createdUser = await User.create(userToSend);
        const createdUser2 = await User.create(userToSend2);
        const createdNote = await Note.create(note);
        const createdNotesGroup = await NotesGroup.create(filter);
        const creatednotesFilters = await NotesFilters.create(notesFilters);
        const createdStudyGroup = await StudyGroup.create(studyGroup);
        const createdUserStudyGroup = await UserStudy.create(userStudy);
        const createdStudyNote = await StudyNote.create(studyNote);
        const createdUsersNote = await UsersNote.create(usersNote);

        let newPassword;
        let newPassword2;

        bcrypt.genSalt(10, (err, salt) => {
          //This function encrypts the password
          bcrypt.hash("ceva123", salt, (err, hash) => {
            //It uses a hash type encryption and receive the password to be encrypted as the first parameter
            if (err) throw err; //If any error is found it is shown
            newPassword = hash;

            const userToBeSent = {
              //We aim to change the old user with no encrypted password in the db, with the new one
              username: "Adelina",
              password: newPassword,
              email: "ceva.ceva@stud.ase.ro",
              age: 21,
              csie: "Info",
              yearCsie: 3,
            };
            User.update(userToBeSent, {
              //Here we use the update() function which receives the data as the first parameter and the user to update as the second one by searching for its id
              where: {
                id: createdUser.id,
              },
            });
          });
          bcrypt.hash("ceva1234", salt, (err, hash) => {
            //It uses a hash type encryption and receive the password to be encrypted as the first parameter
            if (err) throw err; //If any error is found it is shown
            newPassword2 = hash;

            const userToBeSent2 = {
              //We aim to change the old user with no encrypted password in the db, with the new one
              username: "Alexandru",
              password: newPassword2,
              email: "ceva2.ceva@stud.ase.ro",
              age: 21,
              csie: "Info",
              yearCsie: 3,
            };
            User.update(userToBeSent2, {
              //Here we use the update() function which receives the data as the first parameter and the user to update as the second one by searching for its id
              where: {
                id: createdUser2.id,
              },
            });
          });
        });
        res.status(201).send({
          //If everything succeded send a 201 Created status code (succesful type) and a message
          msg: "Database populated",
        });
      } catch (err) {
        //Since this is a try catch, if an error is found it is shown and sent as a message along with a status code 400
        res.status(400).send(console.log(err));
      }
    }
  },
};

module.exports = dbpopulateController;
